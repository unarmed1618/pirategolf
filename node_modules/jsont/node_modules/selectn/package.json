{
  "name": "selectn",
  "author": {
    "name": "Wil Moore III",
    "email": "wil.moore@wilmoore.com"
  },
  "description": "N-levels deep object access via dot/bracket-notation property access string.",
  "version": "0.8.6",
  "keywords": [
    "object",
    "property",
    "access",
    "deep",
    "nested",
    "predicate",
    "functor"
  ],
  "main": "./index",
  "repository": {
    "type": "git",
    "url": "https://github.com/wilmoore/selectn"
  },
  "component": {
    "scripts": {
      "selectn": "index.js"
    }
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*"
  },
  "jam": {
    "include": [
      "selectn.js",
      "Readme.md"
    ]
  },
  "volo": {
    "url": "https://raw.github.com/wilmoore/selectn/v{version}/selectn.js"
  },
  "readme": "# selectn\n\n[![Build Status](https://travis-ci.org/wilmoore/selectn.png?branch=master)](https://travis-ci.org/wilmoore/selectn)\n[![Build Status](https://david-dm.org/wilmoore/selectn.png)](https://david-dm.org/wilmoore/selectn)\n[![NPM version](https://badge.fury.io/js/selectn.png)](http://badge.fury.io/js/selectn)\n\n  N-levels deep object access via dot/bracket-notation property access string allowing you to type `selectn('info.name.full')` instead of `obj && obj.info && obj.info.name &&`, &infin;.\n\n## Features\n\n  - Avoids `if (obj && obj.a && obj.a.b && obj.a.b.c) { return obj.a.b.c; }`.\n  - Supports multiple levels of array nesting (i.e. `group[0].section.a.seat[3]`).\n  - Partial application supported.\n  - Functions generated by `selectn` can be passed to applicative functors like [Array.prototype.map][map] and [Array.prototype.filter][filter].\n  - Works where [typeof][] fails (i.e. deeply nested properties).\n  - ES5 and non-ES5 compatible.\n  - CommonJS, AMD, and legacy-global compatible.\n  - Provides access to global object if no object reference is given.\n\n## Non-Features\n\n  - No `eval` and [friends][Function].\n\n## Installation\n\n[component](http://component.io/wilmoore/selectn)\n\n    $ component install wilmoore/selectn\n\n[bower](http://sindresorhus.com/bower-components/)\n\n    $ bower install selectn\n\n[npm](https://npmjs.org/package/selectn)\n\n    $ npm install selectn\n\n[jam](http://jamjs.org/packages/#/details/selectn)\n\n    $ jam install selectn\n\n[volo](http://volojs.org)\n\n    $ volo add wilmoore/selectn\n\n[global][]\n\n    <script src=\"https://raw.github.com/wilmoore/selectn/master/selectn.js\"></script>\n\n## Example (immediate access)\n\nGiven the following object:\n\n```js\nvar talk = {\n  info: { name: 'Go Ahead, Make a Mess' }\n};\n```\n\nThe generated function can be immediately invoked for error-free and immediate access to deeply nested properties.\n\n```js\nselectn('info.name', talk);\n// => 'Go Ahead, Make a Mess'\n```\n\n## Iterator Example\n\nGiven the following list:\n\n```js\nvar talks  = [\n  { info: { name: 'Go Ahead, Make a Mess' }},\n  { info: { name: 'Silex Anatomy' }},\n  { info: { name: 'Unit Testing in Python' }},\n  { info: { name: 'Setting the Stage' }}\n];\n```\nThe generated function can be used as a predicate for [map][]:\n\n```js\nvar query = selectn('info.name');\n//=> [Function]\n\ntalks.map(query);\n// => [ 'Go Ahead, Make a Mess', 'Silex Anatomy', 'Unit Testing in Python', 'Setting the Stage' ]\n```\n\n## Predicate Example\n\nGiven the following object of language strings:\n\n```js\nvar language = [\n  { strings: { en: { name: 'english' } }},\n  { strings: { es: { name: 'spanish' } }},\n  { strings: { km: { name: 'khmer'   } }},\n  { strings: { es: { name: 'spanish' } }},\n];\n```\nThe generated function can be used as a predicate for [filter][]:\n\n```js\nvar spanish = selectn('strings.es');\n//=> [Function]\n\nlanguage.filter(spanish).length;\n//=> 2\n```\n\n## Callback Example\n\nYou expect the following JSON data from an XMLHttpRequest:\n\n```js\nvar data = { Client: { Message: { id: d50afb80-a6be-11e2-9e96-0800200c9a66 } } };\n```\n\nAccess the `Client.Message.id` property and log the result to the console (using [promises][]):\n\n```js\n$.ajax({...})\n  .then(selectn('Client.Message.id'))\n  .then(console.log.bind(console));\n\n//=> d50afb80-a6be-11e2-9e96-0800200c9a66\n```\n\n**NOTE**: Even if you don't use this methodology in production code, it can be a handy timesaver in terms of quick debugging.\n\n## Rationale\n\nIn larger, data-driven applications, there tends to be a need to do a lot of deep object access which can quickly lead to code like this:\n\n```\nvar name;\n\nif (contact && contact.info && contact.info.name) {\n  name = contact.info.name.full || 'unknown';\n}\n```\n\nThe following is much more concise:\n\n```\nvar name = selectn('info.name.full')(contact) || 'unknown';\n```\n\n## Neckbeard Info\n\nIn case you care about this sort of thing, we are able to do normal function application as well as partially apply when that is convenient due to `currying`.\n\n- `selectn('info.name.full', contact)` (normal function application)\n- `selectn('info.name.full')(contact)` (partial application without a `partial` helper like `Function.prototype.bind`)\n\nSince `selectn` is a 2-ary function, we don't need to use an external library for currying as the algorithm is simple.\n\n## Alternatives\n\n- You can use [typeof][]; however, [typeof][] only \"appears\" to work due to the way the global scope is _implied_.\n- Other solutions involve [eval][] and/or [Function][] ([`eval`][note] in disguise).\n\n## Inspiration\n\n- [to-function][]\n- [reach][]\n- [dref][]\n\n## License\n\n  MIT\n\n\n\n[to-function]: https://github.com/component/to-function\n[reach]:       https://github.com/spumko/hoek#reachobj-chain\n[dref]:        https://github.com/crcn/dref.js\n[Function]:    https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function\n[eval]:        https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/eval\n[note]:        https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Member_Operators#Note_on_eval\n[typeof]:      https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/typeof\n[promises]:    http://promises-aplus.github.io/promises-spec/\n[map]:         https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n[filter]:      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n[global]:      http://yuiblog.com/blog/2006/06/01/global-domination/\n\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/wilmoore/selectn/issues"
  },
  "homepage": "https://github.com/wilmoore/selectn",
  "_id": "selectn@0.8.6",
  "dist": {
    "shasum": "2925ce1a38fce94ac6e9ea056d690b9d1f953c47"
  },
  "_from": "selectn@~0.8.6",
  "_resolved": "https://registry.npmjs.org/selectn/-/selectn-0.8.6.tgz"
}
