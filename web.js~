//Current task- Attach the form to the button. Find a way to possibly do this natively in node.js rather than bullshit with HTML
//Hopefully this will work. 
//


// web.js -- Filename 


// This section necessary to declare plugins/extensions
var util = require("util");
var express = require("express");
var logfmt = require("logfmt");
var pg = require("pg").native;
var forms = require("forms");
// Plugin Declarations complete
//var params = { host: 'ec2-184-73-194-196.compute-1.amazonaws.com' , user: 'zfaagftogdvhjz', password: 'pcXlJD1bP9AygIM7ivINuDOHvS', database: 'dfcvk500ed0il4', ssl: false }
// Local variables necessary for plugins
// String for connecting to the database so it can be changed if necessary-
var conString = "postgres://zfaagftogdvhjz:pcXlJD1bP9AygIM7ivINuDOHvS@ec2-184-73-194-196.compute-1.amazonaws.com:5432/dfcvk500ed0il4";
// Client instatiation
var client = new pg.Client(conString);
//Forms hooks
var fields = forms.fields, validators = forms.validators;


var buff = "Database:"; // For a string to append a full read to
client.connect(); //To actually establish a connection TODO: Use a client pool instead of this.

//express local 
var app = express();

// The actual instertion form constructor
var insertion_form = forms.create({
	player: fields.string({required: true}),
	course: fields.string({required: true}),
	tournament: fields.string(),
	practice: fields.boolean(),
	hole: fields.number({required:true}),
	score: fields.number({required:true}),
	fairway: fields.string({required:true, validators: [validators.maxlength(1)]}),
	goposition: fields.string({validators: [validators.maxlength(1)]}),
	wedgereg: fields.string({validators: [validators.maxlength(1)]}),
	wedgedist: fields.number(),
	wedgerough: fields.string({validators: [validators.maxlength(1)]}),
	greeninout: fields.number(),//fields.string({validators: [validators.maxlength(1)]}),
	greenletter: fields.string({validators: [validators.maxlength(1)]}),
	putts: fields.number(),
	updownsuccess: fields.string({validators: [validators.maxlength(1)]}),
	updownbunker: fields.string({validators: [validators.maxlength(1)]}),
	updowninout: fields.number()
	}); 


app.use(logfmt.requestLogger()); //logfmt hook

//This is called at pirategolf.heroku.com/add
// req == the request's parameters
// res == the response
// res.send is a function that builds the response



app.get('/add', function(req,res) {
	insertion_form.handle(req, {
		success: function (form) {
		    // there is a request and the form is valid                                                                              
		    // form.data contains the submitted data                                                                                 
		    var practiceCaster;
		    if(form.data.practice)
			practiceCaster=1;
		    else
			practiceCaster=0;
		    res.writeHead(200, {'Content-Type': 'text/html'});
		    res.write('<h1>Success!</h1>');
		    client.query('INSERT INTO GolfRounds VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)',[form.data.player ,  form.data.course , form.data.tournament , practiceCaster , form.data.hole , form.data.score , form.data.fairway  , form.data.goposition , form.data.wedgereg , form.data.wedgedist , form.data.wedgerough , form.data.greeninout , form.data.greenletter, form.data.putts , form.data.updownsuccess , form.data.updownbunker , form.data.updowninout], function(err, result){
				 //		    var query = client.query('INSERT INTO GolfRounds VALUES (' + form.data.player + ',' + form.data.course + ',' +  form.data.tournament + ',' + practiceCaster + ',' + form.data.hole + ',' + form.data.score +',' + form.data.fairway  + ',' + form.data.goposition + ',' + form.data.wedgereg + ',' + form.data.wedgedist + ',' + form.data.wedgerough + ',' + form.data.greeninout + ',' + form.data.greenletter + ',' + form.data.putts + ',' + form.data.updownsuccess + ',' + form.data.updownbunker + ',' + form.data.updowninout + ')', function(err, result){
			    if (err) throw err;                                                                     
			    res.write('posted');   });    
		    res.end('<pre>' + util.inspect(form.data) + '</pre>'+ form.data.player);},                                                                                 
		    
		    other: function(form) {
		    res.send('<form action= "", method="GET" >'+insertion_form.toHTML()+ '<input type= "submit" value="Submit"/></form>');

		}
	    });       
	//	res.send('<form action= "", method="GET" >'+insertion_form.toHTML()+ '<input type= "submit" value="Submit"/></form>');
	
	//	Builds the form
	
    });



// A hello world index stub

app.get('/', function(req, res) {
	// You can also generate content this way- I'm planning to create some formatting functions and shit for when we need to make pretty stuff.
	res.writeHead(200, { 'Content-Type': 'text/html' });
	res.write('<!DOCTYPE html><html lang="en"><head>');
	res.write('<meta charset="utf-8">');
	res.write('<title>' + 'Some words' + '</title>');
	res.write('</head><body>');
	res.write('<h1><tt>' + 'more words' + '</tt></h1>');
	res.write('</body></html>');
	res.end();
    });

// Pulls up the first file in the database for testing purposes
// TODO: Make this respond to req params and build a query.
//app.get('/read', function(req, res) {
//	var query = client.query('SELECT * FROM GolfRounds'); //Builds and sends the actual sql query
//	query.on('row', function(row) { // Event function for row behavior
//		res.send(JSON.stringify(row)); //Puts the row into a string and sends it as a response
//			 });
//   });
//Pulls all files in the golfrounds table.
app.get('/readall', function(req, res) {
	//	buff = "Database:";
	//	res.send('A Reader will go here');
	res.writeHead(200, { 'Content-Type': 'text/html' });
	var query = client.query('SELECT * FROM GolfRounds', function(err, result) { 
		//Appends all rows recieved in 'result' to the buffer
		//res.writeHead(200, { 'Content-Type': 'text/html' });
		for(var i in result.rows) { 
		    res.write( JSON.stringify(result.rows[i]));
		    
		}
		
    });
	res.end(); //responds with the filled buffer
    });
// a stub for a posting page
app.post('/write', function(req, res) {


	    //}


	//	player = JSON.stringify(req.body);
	//	res.send("Data " +player);
// forming the query manually for now
	//	var query = client.query('INSERT INTO GolfRounds VALUES (' + req.body.player + ',' + req.body.course + ',' +  req.body.tournament + ',' + req.body.practice + ',' + req.body.hole + ',' + req.body.score +',' + req.body.fairway  + ',' + req.body.goposition + ',' + req.body.wedgereg + ',' + req.body.wedgedist + ','+ req.body.wedgerough + ',' + req.body.wedgerough + ',' + req.body.greeninout + ',' + req.body.greenletter + ',' + req.body.putts + ',' + req.body.updownsuccess + ',' + req.body.updownbunker + ',' + req.body.updowninout + ')', function(err, result){
	//	console.log(player);
	//	if (err) throw err;
	//	res.redirect('/add');
		//   });
});

// Don't mess with this stuff
var port = process.env.PORT || 5000;
app.listen(port, function() {
	console.log("Listening on " + port);
    });

