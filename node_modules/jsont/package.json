{
  "name": "jsont",
  "version": "0.1.2",
  "description": "Simple json template language",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "batch": "~0.5.0",
    "format-parser": "~0.0.2",
    "selectn": "~0.8.6",
    "type-component": "~0.0.1"
  },
  "devDependencies": {
    "mocha": "~1.12.0",
    "expect.js": "~0.2.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/CamShaft/jsont.git"
  },
  "keywords": [
    "json",
    "template"
  ],
  "author": {
    "name": "Cameron Bytheway",
    "email": "cameron@theflokk.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/CamShaft/jsont/issues"
  },
  "readme": "jsont [![Build Status](https://travis-ci.org/CamShaft/jsont.png?branch=master)](https://travis-ci.org/CamShaft/jsont)\n=====\n\nSimple json template language\n\nInstallation\n------------\n\n```sh\n$ npm install jsont\n```\n\n```sh\n$ component install CamShaft/jsont\n```\n\nFeatures\n--------\n\n* Simple\n* Valid JSON\n* Extensible\n* Auto-parallelization of templated properties\n\nExample\n-------\n\nInput:\n\n```json\n{\n  \"name\": \"`user.firstName`\",\n  \"birthday\": \"`user.birthday | date:'MMMM Do'`\",\n  \"addresses\": \"`user.addresses | map | partial:address`\"\n}\n```\n\nOutput:\n\n```json\n{\n  \"name\": \"Cameron\",\n  \"birthday\": \"September 19th\",\n  \"addresses\": [\n    {\n      \"street\": \"123 Fake Street\",\n      \"city\": \"Nowhere\",\n      \"country\": \"USA\"\n    },\n    {\n      \"street\": \"Broadway Street\",\n      \"city\": \"NY\",\n      \"country\": \"USA\"\n    }\n  ]\n}\n```\n\nUsage\n-----\n\n```js\nvar jsont = require('jsont')();\n\nvar template = require('./my-template.json');\n\nvar options = {};\n\njsont.render(template, options, function(err, out) {\n  console.log(out);\n});\n```\n\nHelpers\n-------\n\nYou can easily extend `jsont` by calling `use`:\n\n```js\nvar jsont = require('jsont')();\n\njsont.use('reverse', function(input, next) {\n  next(null, input.split(\"\").reverse().join(\"\"));\n});\n```\n\nIn your template you can then call the helper by piping data to it:\n\n```json\n{\n  \"reversed-name\": \"'Cameron' | reverse\"\n}\n```\n\nOut comes:\n\n```json\n{\n  \"reversed-name\": \"noremaC\"\n}\n```\n\nYou can also pass arguments and chain helpers\n\n```json\n{\n  \"list\": \"'1,2,3,4,5' | split:',' | map | to-int\"\n}\n```\n\n```js\njsont.use('split', function(input, separator, next) {\n  next(null, input.split(separator));\n});\n\njsont.use('to-int', function(input, next) {\n  next(null, parseInt(input));\n});\n```\n\nAnd we get:\n\n```json\n{\n  \"list\": [\n    1,\n    2,\n    3,\n    4,\n    5\n  ]\n}\n```\n\nParallelization\n---------------\n\nSince helpers are all asynchronous behind the scenes we get parallelization in a simple form:\n\n```js\nvar api = require('./api');\n\njsont.use('user-likes', function(user, next) {\n  if (typeof user !== 'object') user = {id: user};\n\n  api.likes(user.id, function(err, likes) {\n    if (err) return next(err);\n\n    user.likes = likes;\n    next(null, user);\n  });\n});\n\njsont.use('user-followers', function(id, next) {\n  api.followers(id, next);\n});\n\njsont.use('user', function(id, next) {\n  api.get(id, function(err, user) {\n    if (err) return next(err);\n\n    user.id = id;\n    next(null, user);\n  });\n});\n\njsont.use('length', function(user, property, position, next) {\n  if (typeof position === 'function') return position(null, user[property].length);\n  user[position] = user[property].length;\n  next(null, user);\n});\n\njsont.renderFile('user-profile.json', {id: 0}, function(err, out) {\n  console.log(out);\n});\n```\n\n```json\n{\n  \"id\": \"`id`\",\n  \"likes\": \"`id | user-likes | length:likes`\",\n  \"followers\": \"`id | user-followers | map | user | user-likes | length:likes,likes`\"\n}\n```\n\nEverything gets put on the event loop and renders as responses come back.\n\n```json\n{\n  \"id\": \"1\",\n  \"likes\": 4,\n  \"followers\": [\n    {\n      \"id\": \"2\",\n      \"name\": \"Scott\",\n      \"likes\": 3\n    },\n    {\n      \"id\": \"3\",\n      \"name\": \"Dave\",\n      \"likes\": 2\n    }\n  ]\n}\n```\n\nTests\n-----\n\n```sh\n$ npm test\n```\n\nTODO\n----\n\n* Create a richer evaluator to do something like:\n\n  ```json\n  {\n    \"user\": \"`{id: id, name: name} | my-helper`\"\n  }\n  ```\n* Cache compiled templates using the `filename` option\n* Expose concurrency settings\n* Allow option to configure escape character \n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/CamShaft/jsont",
  "_id": "jsont@0.1.2",
  "dist": {
    "shasum": "9c0fe05920b0f756457618a2bb6cefa0ae7bcfd0"
  },
  "_from": "jsont@",
  "_resolved": "https://registry.npmjs.org/jsont/-/jsont-0.1.2.tgz"
}
